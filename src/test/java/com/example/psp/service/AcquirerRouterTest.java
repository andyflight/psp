package com.example.psp.service;

import com.example.psp.domain.enums.AcquirerType;
import com.example.psp.domain.valueobjects.CardDetails;
import com.example.psp.service.acquirer.impl.AcquirerRouterImpl;
import com.example.psp.service.acquirer.ports.Acquirer;
import com.example.psp.service.acquirer.ports.AcquirerRouter;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import reactor.core.publisher.Mono;
import reactor.test.StepVerifier;

import java.util.List;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
@DisplayName("AcquirerRouter Tests")
class AcquirerRouterTest {

    @Mock
    private Acquirer acquirerA;

    @Mock
    private Acquirer acquirerB;

    @Mock
    CardDetails cardDetails;

    AcquirerRouter router;

    @BeforeEach
    void setUp() {

        when(acquirerA.getType()).thenReturn(AcquirerType.ACQUIRER_A);
        when(acquirerB.getType()).thenReturn(AcquirerType.ACQUIRER_B);

        router = new AcquirerRouterImpl(List.of(acquirerA, acquirerB));

    }

    @Test
    void getAcquirer_ShouldReturnAcquirerA_WhenBinSumIsEven() {

        when(cardDetails.getBIN()).thenReturn("222222"); // Sum is 12 (even)

        Mono<Acquirer> result = router.getAcquirer(cardDetails);

        StepVerifier.create(result)
                .expectNext(acquirerA)
                .verifyComplete();

    }

    @Test
    void getAcquirer_ShouldReturnAcquirerB_WhenBinSumIsOdd() {

        when(cardDetails.getBIN()).thenReturn("222223"); // Sum is 13 (odd)

        Mono<Acquirer> result = router.getAcquirer(cardDetails);

        StepVerifier.create(result)
                .expectNext(acquirerB)
                .verifyComplete();

    }

    @Test
    void getAcquirer_ShouldThrowNullPointerException_WhenCardDetailsIsNull() {

        // synchronous check because the exception is thrown before returning Mono in generated by Lombok code
        NullPointerException ex = assertThrows(NullPointerException.class, () -> router.getAcquirer(null));
        assertEquals("cardDetails is marked non-null but is null", ex.getMessage());

    }

    @Test
    void getAcquirer_ShouldThrowIllegalStateException_WhenNoAcquirerFound() {

        when(cardDetails.getBIN()).thenReturn("222222"); // Sum is 12 (even)

        // Simulate no acquirers in the router
        router = new AcquirerRouterImpl(List.of());

        Mono<Acquirer> result = router.getAcquirer(cardDetails);

        StepVerifier.create(result)
                .expectErrorMatches(throwable ->
                        throwable instanceof IllegalStateException &&
                                throwable.getMessage().equals("No acquirer found")
                )
                .verify();

    }
}
